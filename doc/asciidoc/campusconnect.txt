CampusConnect
-------------
(((developing)))
(((campusconnect)))

Scriptable REST commandline client
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
As the ECSA is derived from an architecture style for distributed systems
called REST, the major tool for developing in an ECSA context is a scriptable
REST commandline client. An excellent choice would be `curl`.

Monitoring resources
^^^^^^^^^^^^^^^^^^^^
Following code monitors the events resource every 5 seconds and
shows/highlights the differences in the output:

------------------------------------------------------------------
watch -n 5 --differences=cumulative --no-title \
'curl -i --cacert /path/to/freeit-root-ca.cert.pem \
     --cert /path/to/participant.cert.pem \
     --key /path/to/participant.key.pem \
     --pass "secure pwd" \
     -X GET https://ecscc.uni-stuttgart.de/ra/ecs-test/sys/events'
------------------------------------------------------------------

Simulating LSFproxy
~~~~~~~~~~~~~~~~~~~
To develop without a running LSFproxy you could simply provide static resources
inside the ECSA network. At ECS you have to create the specific CampusConnect
resources (`/campusconnect/courses`, `/campusconnect/directory_trees` and
`/campusconnect/course_members`). The essential LSFproxy communication to ECS
could be substituted with curl scripts/calls. In presence of a LSFproxy, its
resource representations has to be retrieved indirectly through ECS (see
<<_direct_participant_to_participant_communication>>). For each development
party you should create a separate LSFproxy participant at ECS. For easier
usage we provide a
{doctype@hyper:{lsfproxy_sh_lnk}[shell script]:shell script footnote\:[LSFproxy shell script see {lsfproxy_sh_txt}]}
simulating an LSFproxy. Please have a look at the top of the script and adjust
the appropriate lines. For development we provide an ECS, LSFproxy certificates
and LSFproxy data. Please contact us (info[at]freeit[dot]de). Of course you can
drive all parts by your own and have to fill out the lines by your personal
data.

Create
^^^^^^
To POST new LSFproxy course to a community participant (e.g. a LMS) call the
script like this:

----------------------------
  ./lsfproxy.sh -c -k 11 -u 1 create

  -c ... you want to work with courses
  -k ... you address membership 11
  -u ... static course data with DATA_URL1 (see top of LSFproxy.sh)
  create ... POST this message to ECS (URL of ECS see top of LSFproxy.sh)
----------------------------

For a new LSFproxy directory-tree:

----------------------------
  ./lsfproxy.sh -t -k 11 -u 3 create

  -t ... you want to work with trees
  -k ... you address membership 11
  -u ... static tree data with DATA_URL3 (see top of LSFproxy.sh)
  create ... POST this message to ECS (URL of ECS see top of LSFproxy.sh)
----------------------------

You always have to choose the appropriate DATA_URL (see top of LSFproxy.sh)
that correspondents to the resource you want to operate on ECS. Feel free to
download these static representations from the URLs assigned to the DATA_URL
constatnts at top of the script and setup your own static LSFproxy data
representations at your local web sever.

Delete
^^^^^^
After you have created some messages, you can of course DELETE them (you are
the owner). But first you have to distinguish the resource id on ECS. Either
you have noticed the id at creation time looking at the provided `Location`
header from ECS or you request first a resource listing and second request a
resource representation from this id checking it is the right one before
deleting it:

----------------------------
  ./lsfproxy.sh -c get
  -c ... you want to work with courses
  get ... get a list of the resource

  ./lsfproxy.sh -c -i 2445 delete
  -c ... you want to work with courses
  -i ... resource id
  delete ... delete resource
----------------------------

Update
^^^^^^
In order to update a resource call the script like this:

----------------------------
  ./lsfproxy.sh -c -i 2445 -k 11 -u 4 update
  -c ... you want to work with courses
  -i ... resource id
  -k ... you address membership 11
  -u ... static course data with DATA_URL4
  update ... PUT this message to ECS
----------------------------

Show Memberships
^^^^^^^^^^^^^^^^
You can also show your memberships by calling:

----------------------------
./lsfproxy.sh -s get
----------------------------

Show Usage
^^^^^^^^^^
And last you can show a usage help text by calling the script with no
parameters and options or with the `-h` option:

----------------------------
  ./lsfproxy.sh -h

  Usage: lsfproxy.sh options <create|get|delete|update>
  Options:
    -c ... courses
    -m ... course members
    -t ... directory trees
    -s ... memberships
    -i <resource id>
    -k <membership id>
    -u <data url id>
    -v   ... verbose output
    -h|? ... usage
----------------------------

Please remember, this script is only a help utility, not full-fledged
application. So please adjust it to your needs. 

Resources
~~~~~~~~~
/campusconnect/courses
^^^^^^^^^^^^^^^^^^^^^^
{hyperdoc#}https://ecs.uni-stuttgart.de/ecsa-wiki/CampusConnect/Arbeitspakete/EcsREST/CmsCourses[example],
{hyperdoc#}http://repo.or.cz/w/ecs.git/blob_plain/HEAD:/campusconnect/schemas/cc_courses.schema.json[schema]
{hyperdoc%}example (see \https://ecs.uni-stuttgart.de/ecsa-wiki/CampusConnect/Arbeitspakete/EcsREST/CmsCourses),

{hyperdoc%}schema (see \http://repo.or.cz/w/ecs.git/blob_plain/HEAD:/campusconnect/schemas/cc_courses.schema.json)

/campusconnect/organisation_units
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{hyperdoc#}https://ecs.uni-stuttgart.de/ecsa-wiki/CampusConnect/Arbeitspakete/EcsREST/CmsInstitutions[example], 
{hyperdoc#}http://repo.or.cz/w/ecs.git/blob_plain/HEAD:/campusconnect/schemas/cc_organisation_units.schema.json[schema]
{hyperdoc%}example (see \https://ecs.uni-stuttgart.de/ecsa-wiki/CampusConnect/Arbeitspakete/EcsREST/CmsInstitutions), 

{hyperdoc%}schema (see \http://repo.or.cz/w/ecs.git/blob_plain/HEAD:/campusconnect/schemas/cc_organisation_units.schema.json)

/campusconnect/terms
^^^^^^^^^^^^^^^^^^^^
{hyperdoc#}https://ecs.uni-stuttgart.de/ecsa-wiki/CampusConnect/Arbeitspakete/EcsREST/CmsSemesters[example], 
{hyperdoc#}http://repo.or.cz/w/ecs.git/blob_plain/HEAD:/campusconnect/schemas/cc_terms.schema.json[schema]
{hyperdoc%}example (see \https://ecs.uni-stuttgart.de/ecsa-wiki/CampusConnect/Arbeitspakete/EcsREST/CmsSemesters), 

{hyperdoc%}schema (see \http://repo.or.cz/w/ecs.git/blob_plain/HEAD:/campusconnect/schemas/cc_terms.schema.json)

/campusconnect/course_members
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{hyperdoc#}https://ecs.uni-stuttgart.de/ecsa-wiki/CampusConnect/Arbeitspakete/EcsREST/CmsCourseMembers[example], 
{hyperdoc#}http://repo.or.cz/w/ecs.git/blob_plain/HEAD:/campusconnect/schemas/cc_course_members.schema.json[schema]
{hyperdoc%}example (see \https://ecs.uni-stuttgart.de/ecsa-wiki/CampusConnect/Arbeitspakete/EcsREST/CmsCourseMembers), 

{hyperdoc%}schema (see \http://repo.or.cz/w/ecs.git/blob_plain/HEAD:/campusconnect/schemas/cc_course_members.schema.json)

/campusconnect/directory_trees
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{hyperdoc#}https://ecs.uni-stuttgart.de/ecsa-wiki/CampusConnect/Arbeitspakete/EcsREST/CmsDirectoryTrees[example], 
{hyperdoc#}http://repo.or.cz/w/ecs.git/blob_plain/HEAD:/campusconnect/schemas/cc_directory_trees.schema.json[schema]
{hyperdoc%}example (see \https://ecs.uni-stuttgart.de/ecsa-wiki/CampusConnect/Arbeitspakete/EcsREST/CmsDirectoryTrees),

{hyperdoc%}schema (see \http://repo.or.cz/w/ecs.git/blob_plain/HEAD:/campusconnect/schemas/cc_directory_trees.schema.json)

/campusconnect/courselinks
^^^^^^^^^^^^^^^^^^^^^^^^^^
{hyperdoc#}https://ecs.uni-stuttgart.de/ecsa-wiki/CampusConnect/Arbeitspakete/EcsREST/CmsCourselinks[example], 
{hyperdoc#}http://repo.or.cz/w/ecs.git/blob_plain/HEAD:/campusconnect/schemas/cc_courselinks.schema.json[schema]
{hyperdoc%}example (see \https://ecs.uni-stuttgart.de/ecsa-wiki/CampusConnect/Arbeitspakete/EcsREST/CmsCourselinks),

{hyperdoc%}schema (see \http://repo.or.cz/w/ecs.git/blob_plain/HEAD:/campusconnect/schemas/cc_courselinks.schema.json)


///////////////////////////////

\begin{tabular}[t]{|c|c|c|} \hline
\it resource name & \it example & \it schema\\ 
\tt /campusconnect/\ldots & \it representation & \it definition\\ \hline\hline

\tt courses
& \href{https://ecs.uni-stuttgart.de/ecsa-wiki/CampusConnect/Arbeitspakete/EcsREST/CmsCourses}{link}
& \href{http://repo.or.cz/w/ecs.git/blob_plain/HEAD:/campusconnect/schemas/cc_courses.schema.json}{link}\\ \hline

\tt organisation\_units
& \href{https://ecs.uni-stuttgart.de/ecsa-wiki/CampusConnect/Arbeitspakete/EcsREST/CmsInstitutions}{link}
& \href{http://repo.or.cz/w/ecs.git/blob_plain/HEAD:/campusconnect/schemas/cc_organisation_units.schema.json}{link}\\ \hline

\tt terms
& \href{https://ecs.uni-stuttgart.de/ecsa-wiki/CampusConnect/Arbeitspakete/EcsREST/CmsSemesters}{link}
& \href{http://repo.or.cz/w/ecs.git/blob_plain/HEAD:/campusconnect/schemas/cc_terms.schema.json}{link}\\ \hline

\tt course\_members
& \href{https://ecs.uni-stuttgart.de/ecsa-wiki/CampusConnect/Arbeitspakete/EcsREST/CmsCourseMembers}{link}
& \href{http://repo.or.cz/w/ecs.git/blob_plain/HEAD:/campusconnect/schemas/cc_course_members.schema.json}{link}\\ \hline

\tt directory\_trees
& \href{https://ecs.uni-stuttgart.de/ecsa-wiki/CampusConnect/Arbeitspakete/EcsREST/CmsDirectoryTrees}{link}
& \href{http://repo.or.cz/w/ecs.git/blob_plain/HEAD:/campusconnect/schemas/cc_directory_trees.schema.json}{link}\\ \hline

\tt courselinks
& \href{https://ecs.uni-stuttgart.de/ecsa-wiki/CampusConnect/Arbeitspakete/EcsREST/CmsCourselinks}{link}
& \href{http://repo.or.cz/w/ecs.git/blob_plain/HEAD:/campusconnect/schemas/cc_courselinks.schema.json}{link}\\ \hline

\end{tabular}

//////////////////////

include::lsfproxy.txt[]
